## Copyright 2022 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

name: CI GPU Linux Workflow
on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-gpu:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      artifact-out: build-gpu
      artifact-path: ./build/install ./build/openvkl/build
      install-gfx-driver: false
      level-zero-version: public/1.9.4
      env-from-files: .github/deps/dpcpp-sycl-nightly.env
      cmd: |
        export CC=clang
        export CXX=clang++
        gitlab/build.sh -D BUILD_OPENVDB=OFF -D BUILD_ISPCRT_GPU=ON -D BUILD_EMBREE_SYCL=ON \
                        -D OPENVKL_EXTRA_OPTIONS="-DOPENVKL_ENABLE_DEVICE_GPU=ON \
                           -DOPENVKL_DEVICE_CPU_STRUCTURED_REGULAR=OFF \
                           -DOPENVKL_DEVICE_CPU_STRUCTURED_REGULAR_LEGACY=ON"

  build-gpu-suse:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: opensuse/leap:15.3
      artifact-out: build-gpu-suse
      artifact-path: ./build/install ./build/openvkl/build
      install-gfx-driver: false
      level-zero-version: public/1.9.4
      env-from-files: .github/deps/dpcpp-sycl-nightly.env
      cmd: |
        export CC=clang
        export CXX=clang++
        gitlab/build.sh -D BUILD_OPENVDB=OFF -D BUILD_ISPCRT_GPU=ON -D BUILD_EMBREE_SYCL=ON \
                        -D OPENVKL_EXTRA_OPTIONS="-DOPENVKL_ENABLE_DEVICE_GPU=ON \
                           -DOPENVKL_DEVICE_CPU_STRUCTURED_REGULAR=OFF \
                           -DOPENVKL_DEVICE_CPU_STRUCTURED_REGULAR_LEGACY=ON"


  test-build-from-install-dg2:
    needs: [ build-gpu ]
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "dg2" ]'
      artifact-in: build-gpu
      level-zero-version: public/1.9.4
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        export CC=clang
        export CXX=clang++
        export LD_LIBRARY_PATH=`pwd`/build/install/lib:$LD_LIBRARY_PATH
        export PATH=`pwd`/build/install/bin:`pwd`/build/install:$PATH
        gitlab/build-from-install.sh

  test-pvc:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "pvc" ]'
      artifact-in: build-gpu
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH

        # Enable persistent JIT cache
        export SYCL_CACHE_PERSISTENT=1
        export SYCL_CACHE_DIR=./jit_cache

        echo "### Run without chunking allocator enabled in ISPCRT"
        ./bin/vklTutorialGPU
        ./bin/vklTestsGPU --durations yes

        echo "### Run again with chunking allocator enabled in ISPCRT"
        ISPCRT_MEM_POOL=1 ./bin/vklTutorialGPU
        ISPCRT_MEM_POOL=1 ./bin/vklTestsGPU --durations yes exclude:'Multiple devices'

  test-examples-pvc:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "pvc" ]'
      artifact-in: build-gpu
      artifact-out: test-examples-pvc
      artifact-path: ./build/install/*/*.pfm
      artifact-on-failure: true
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH

        # Enable persistent JIT cache
        export SYCL_CACHE_PERSISTENT=1
        export SYCL_CACHE_DIR=./jit_cache

        echo "### Run without chunking allocator enabled in ISPCRT"
        $GITHUB_WORKSPACE/.github/scripts/run-examples-tests.sh

        echo "### Run again with chunking allocator enabled in ISPCRT"
        ISPCRT_MEM_POOL=1 $GITHUB_WORKSPACE/.github/scripts/run-examples-tests.sh

  test-dg2:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "dg2" ]'
      artifact-in: build-gpu
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH

        # Enable persistent JIT cache
        export SYCL_CACHE_PERSISTENT=1
        export SYCL_CACHE_DIR=./jit_cache

        echo "### Run without chunking allocator enabled in ISPCRT"
        ./bin/vklTutorialGPU
        ./bin/vklTestsGPU --durations yes

        echo "### Run again with chunking allocator enabled in ISPCRT"
        ISPCRT_MEM_POOL=1 ./bin/vklTutorialGPU
        ISPCRT_MEM_POOL=1 ./bin/vklTestsGPU --durations yes exclude:'Multiple devices'

  test-examples-dg2:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "dg2" ]'
      artifact-in: build-gpu
      artifact-out: test-examples-dg2
      artifact-path: ./build/install/*/*.pfm
      artifact-on-failure: true
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH

        # Enable persistent JIT cache
        export SYCL_CACHE_PERSISTENT=1
        export SYCL_CACHE_DIR=./jit_cache

        echo "### Run without chunking allocator enabled in ISPCRT"
        $GITHUB_WORKSPACE/.github/scripts/run-examples-tests.sh

        echo "### Run again with chunking allocator enabled in ISPCRT"
        ISPCRT_MEM_POOL=1 $GITHUB_WORKSPACE/.github/scripts/run-examples-tests.sh

  perf-dg2:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "dg2" ]'
      artifact-in: build-gpu
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH
        ./bin/vklBenchmarkGPU --benchmark_repetitions=5 --benchmark_min_time=10

  perf-pvc:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "pvc" ]'
      artifact-in: build-gpu
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH
        ./bin/vklBenchmarkGPU --benchmark_repetitions=5 --benchmark_min_time=10

  test-examples-big-volume-pvc:
    secrets: inherit
    needs: [ build-gpu ]
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker_gpu.yml@main
    with:
      submodules: true
      image: ubuntu:22.04
      runs-on: '[ "Linux", "docker", "pvc" ]'
      artifact-in: build-gpu
      artifact-out: test-examples-big-volume-pvc
      artifact-path: ./build/install/*.pfm
      artifact-on-failure: true
      env-from-files: .github/deps/dpcpp-sycl-nightly.env .github/deps/gfx-ubuntu22-internal.env
      options: --device=/dev/dri:/dev/dri
      cmd: |
        cd ./build/install
        export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH

        # Enable persistent JIT cache
        export SYCL_CACHE_PERSISTENT=1
        export SYCL_CACHE_DIR=./jit_cache

        $GITHUB_WORKSPACE/.github/scripts/run-examples-big-volume-tests.sh