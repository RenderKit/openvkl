## Copyright 2022 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

name: (Internal) Linux
on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

jobs:
  build-rocky8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:8
      artifact-out: build-rocky8
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh

  test-rocky8:
    needs: build-rocky8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky8
      image: rockylinux:8
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-rocky8-icx:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:8
      artifact-out: build-rocky8-icx
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        module load cmake
        module load intel/2022.1
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fPIC -fp-model=precise"
        export LDFLAGS="-static-intel"
        gitlab/build.sh

  test-rocky8-icx:
    needs: build-rocky8-icx
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky8-icx
      image: rockylinux:8
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-rocky8-icx-tbb2020:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:8
      artifact-out: build-rocky8-icx-tbb2020
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        module load cmake
        module load intel/2022.1
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fPIC -fp-model=precise"
        export LDFLAGS="-static-intel"
        gitlab/build.sh -D TBB_VERSION=2020.3 -D TBB_HASH=""

  test-rocky8-icx-tbb2020:
    needs: build-rocky8-icx-tbb2020
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky8-icx-tbb2020
      image: rockylinux:8
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-rocky8-icx-tbb2020-avx512_8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:8
      artifact-out: build-rocky8-icx-tbb2020-avx512_8
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        module load cmake
        module load intel/2022.1
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fPIC -fp-model=precise"
        export LDFLAGS="-static-intel"
        gitlab/build.sh -D TBB_VERSION=2020.3 -D TBB_HASH="" -D OPENVKL_EXTRA_OPTIONS="-DOPENVKL_ISA_AVX512SKX_8_WIDE=ON -DOPENVKL_ISA_AVX512SKX=OFF"

  test-rocky8-icx-tbb2020-avx512_8:
    needs: build-rocky8-icx-tbb2020-avx512_8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky8-icx-tbb2020-avx512_8
      image: rockylinux:8
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-rocky9:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:9
      artifact-out: build-rocky9
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh

  test-rocky9:
    needs: build-rocky9
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky9
      image: rockylinux:9
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  # uses a newer CMake which allows OpenVDB to build
  build-rocky9-module-cmake:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: rockylinux:9
      artifact-out: build-rocky9-module-cmake
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        module load cmake
        gitlab/build.sh -D TBB_VERSION=2020.3 -D TBB_HASH=""

  test-rocky9-module-cmake:
    needs: build-rocky9-module-cmake
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky9-module-cmake
      image: rockylinux:9
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-ubuntu20_04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: ubuntu:20.04
      artifact-out: build-ubuntu20_04
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

  build-ubuntu22_04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: ubuntu:22.04
      artifact-out: build-ubuntu22_04
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

  build-ubuntu24_04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: ubuntu:24.04
      artifact-out: build-ubuntu24_04
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

  test-ubuntu20_04:
    needs: build-ubuntu20_04
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-ubuntu20_04
      image: ubuntu:20.04
      cmd: |
        export LD_LIBRARY_PATH=./build/install/lib
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  test-ubuntu22_04:
    needs: build-ubuntu22_04
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-ubuntu22_04
      image: ubuntu:22.04
      cmd: |
        export LD_LIBRARY_PATH=./build/install/lib
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  test-ubuntu24_04:
    needs: build-ubuntu24_04
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-ubuntu24_04
      image: ubuntu:24.04
      cmd: |
        export LD_LIBRARY_PATH=./build/install/lib
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-arch:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-arch
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh

  test-arch:
    needs: build-arch
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-arch
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-arch-clang:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-arch-clang
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        export CC=clang
        export CXX=clang++
        gitlab/build.sh 

  test-arch-clang:
    needs: build-arch-clang
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-arch-clang
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-arch-address-sanitizer:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-arch-address-sanitizer
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        export CC=clang
        export CXX=clang++
        export CFLAGS=-fsanitize=address
        export CXXFLAGS=-fsanitize=address
        export LDFLAGS=-fsanitize=address
        gitlab/build.sh -D BUILD_OPENVDB=OFF

  test-arch-address-sanitizer:
    needs: build-arch-address-sanitizer
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-arch-address-sanitizer
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-arch-debug:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-arch-debug
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -D CMAKE_BUILD_TYPE=Debug

  test-arch-debug:
    needs: build-arch-debug
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-arch-debug
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-arch-devel-rkdeps:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-arch-devel-rkdeps
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -D RKCOMMON_VERSION=devel -D RKCOMMON_HASH="" -D EMBREE_VERSION=devel -D EMBREE_HASH=""

  test-arch-devel-rkdeps:
    needs: build-arch-devel-rkdeps
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-arch-devel-rkdeps
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-linux-arch:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      force-delete: true    # guarantees .gitattributes are respected in working dir
      submodules: true
      image: archlinux:latest
      artifact-out: build-linux-arch
      artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        gitlab/build.sh -G Ninja

  test-linux-arch:
    needs: build-linux-arch
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      runs-on: '[ "Linux", "docker", "avx512" ]'
      artifact-in: build-linux-arch
      image: archlinux:latest
      cmd: |
        ./build/openvkl/build/vklTutorialCPU
        ./build/openvkl/build/vklTutorialISPC
        ./build/openvkl/build/vklExamplesCPU -batch -printStats -spp 50 -framebufferSize 1024 1024
        ./build/openvkl/build/vklTestsCPU --durations yes

  build-from-install-rocky8:
    needs: build-rocky8
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      artifact-in: build-rocky8
      image: rockylinux:8
      cmd: |
        gitlab/build-from-install.sh

  static-analysis:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@main
    with:
      coverity: true
      project: OpenVKL
      submodules: true
      prebuild: >
        mkdir build &&
        cd build &&
        cmake -DBUILD_JOBS=`nproc` -DBUILD_DEPENDENCIES_ONLY=ON -DBUILD_GLFW=OFF "$@" ../superbuild &&
        cmake --build . &&
        mkdir openvkl_build &&
        cd openvkl_build &&
        DEP_INSTALL_DIR=`pwd`/../install &&
        export rkcommon_DIR=$DEP_INSTALL_DIR &&
        export embree_DIR=$DEP_INSTALL_DIR &&
        cmake -DISPC_EXECUTABLE=$DEP_INSTALL_DIR/bin/ispc -DBUILD_EXAMPLES=OFF -DRKCOMMON_TBB_ROOT=$DEP_INSTALL_DIR ../.. &&
        cd ../..
      build: cmake --build ./build/openvkl_build
