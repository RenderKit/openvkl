// Copyright 2019-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "rkcommon/math/box.ih"

#include "Scene.h"

// openvkl
#include "openvkl/openvkl.isph"

struct Ray
{
  vec3f org;
  vec3f dir;
  float tnear;
  float tfar;
};

struct Renderer
{
  vec3f camPos;
  vec3f dir_00;
  vec3f dir_du;
  vec3f dir_dv;

  vec3f *framebuffer;
  float *accum_r;
  float *accum_g;
  float *accum_b;
  int frameID;

  vec3f (*uniform renderPixel)(uniform Renderer *uniform self,
                               const uniform Scene *uniform scene,
                               Ray &ray,
                               const vec2i &pixel,
                               const uniform int &frameID,
                               const uniform int &fbWidth);
};

inline Ray Renderer_computeRay(uniform Renderer *uniform self,
                               const vec2f &screenCoords)
{
  vec3f dir = self->dir_00 + screenCoords.x * self->dir_du +
              screenCoords.y * self->dir_dv;

  Ray ray;

  ray.org   = self->camPos;
  ray.dir   = normalize(dir);
  ray.tnear = 0.f;
  ray.tfar  = inf;

  return ray;
}

inline vec4f Renderer_sampleTransferFunction(const uniform Scene *uniform scene,
                                             float value)
{
  vec4f colorAndOpacity = make_vec4f(0.f);

  if (isnan(value) || scene->tfNumColorsAndOpacities == 0) {
    return colorAndOpacity;
  }

  if (value <= scene->tfValueRange.lower) {
    return scene->tfColorsAndOpacities[0];
  }

  if (value >= scene->tfValueRange.upper) {
    return scene->tfColorsAndOpacities[scene->tfNumColorsAndOpacities - 1];
  }

  // map the value into the range [0, size - 1]
  value = (value - scene->tfValueRange.lower) /
          (scene->tfValueRange.upper - scene->tfValueRange.lower) *
          (scene->tfNumColorsAndOpacities - 1.f);

  // index and fractional offset
  const int index       = floor(value);
  const float remainder = value - index;

  // the final interpolated value
  return ((1.f - remainder) * scene->tfColorsAndOpacities[index] +
          remainder *
              scene->tfColorsAndOpacities[min(
                  ((int32)(index + 1)),
                  ((uniform int32)(scene->tfNumColorsAndOpacities - 1)))]);
}

inline void intersectBox(const Ray &ray,
                         const uniform box3f &box,
                         float &tnear,
                         float &tfar)
{
  const vec3f mins = (box.lower - ray.org) * rcp_safe(ray.dir);
  const vec3f maxs = (box.upper - ray.org) * rcp_safe(ray.dir);
  tnear            = reduce_max(make_vec4f(min(mins, maxs), ray.tnear));
  tfar             = reduce_min(make_vec4f(max(mins, maxs), ray.tfar));
}

///////////////////////////////////////////////////////////////////////////////
// TEA - Random numbers based on Tiny Encryption Algorithm ////////////////////
///////////////////////////////////////////////////////////////////////////////

inline void tea8(unsigned int &_v0, unsigned int &_v1)
{
  unsigned int v0  = _v0;  // Operate on registers to avoid slowdown!
  unsigned int v1  = _v1;
  unsigned int sum = 0;

  for (uniform int i = 0; i < 8; i++) {  // just 8 instead of 32 rounds
    sum += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + sum) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + sum) ^ ((v0 >> 5) + 0x7e95761e);
  }

  _v0 = v0;
  _v1 = v1;
}

struct RandomTEA
{
  unsigned int v0, v1;
};

inline void RandomTEA__Constructor(varying RandomTEA *uniform this,
                                   const unsigned int idx,
                                   const unsigned int seed)
{
  this->v0 = idx;
  this->v1 = seed;
}

inline varying vec2f RandomTEA__getFloats(varying RandomTEA *uniform this)
{
  tea8(this->v0, this->v1);
  const float tofloat = 2.3283064365386962890625e-10f;  // 1/2^32
  return make_vec2f(this->v0 * tofloat, this->v1 * tofloat);
}
