## Copyright 2019-2021 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

variables:
  GIT_DEPTH: "15"
  KW_PROJECT_NAME: openvkl

stages:
  - build
  - test
  - benchmark
  - scan1
  - scan2
  - release
  - release-test
  - scan-binaries

## Job Templates ##

.job_template: &base_build_job
  stage: build
  script:
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF
  artifacts:
    paths:
    - build/install
    - build/openvkl/build
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update

.job_template: &build_job_docker
  <<: *base_build_job
  tags:
    - docker

.job_template: &build_job_docker_centos7_modules
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7-mod
  script:
    - gitlab/build.sh
  tags:
    - docker
    - modules

.job_template: &base_build_from_install_job
  stage: test
  script:
    - gitlab/build-from-install.sh

.job_template: &build_from_install_job_docker
  <<: *base_build_from_install_job
  tags:
    - docker

.job_template: &base_functional_test_job
  stage: test
  script:
    - ./build/openvkl/build/vklTests # NOTE(jda) - base this on install later

.job_template: &test_functional_job_docker
  <<: *base_functional_test_job
  tags:
    - docker

.job_template: &base_benchmark_job
  stage: benchmark
  script:
    - gitlab/run-benchmarks.sh

.job_template: &base_release_job
  stage: release
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update

.job_template: &base_release_test_job
  stage: release-test

## Build Jobs ##

build-centos7:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
  - gitlab/build.sh

build-centos7-icc:
  <<: *build_job_docker_centos7_modules
  script:
    - module load cmake
    - module load intel/2019.4
    - export CC=icc
    - export CXX=icpc
    - export CXXFLAGS="-static-intel -fPIC"
    - gitlab/build.sh

build-centos7-icc15:
  <<: *build_job_docker_centos7_modules
  script:
    - module load cmake
    - module load intel/2015
    - export CC=icc
    - export CXX=icpc
    - export CXXFLAGS="-static-intel -fPIC"
    - gitlab/build.sh

build-centos8:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos8
  script:
  - gitlab/build.sh -G Ninja

build-ubuntu16.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu16.04
  script:
    - gitlab/build.sh -G Ninja

build-ubuntu18.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu18.04
  script:
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

build-ubuntu20.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu20.04
  script:
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

build-arch:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch

build-arch-clang:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  script:
    - export CC=clang
    - export CXX=clang++
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

build-arch-address-sanitizer:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  script:
    - export CFLAGS=-fsanitize=address
    - export CXXFLAGS=-fsanitize=address
    - export LDFLAGS=-fsanitize=address
    - gitlab/build.sh -D BUILD_GLFW=OFF

build-arch-debug:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  script:
    - gitlab/build.sh -D CMAKE_BUILD_TYPE=Debug -D BUILD_GLFW=OFF

build-arch-devel-rkdeps:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  script:
    - gitlab/build.sh -D RKCOMMON_VERSION=devel -D RKCOMMON_HASH="" -D EMBREE_VERSION=devel -D EMBREE_HASH=""

build-macOS:
  <<: *base_build_job
  stage: build
  script:
    - gitlab/build.sh
  tags:
    - osx
    - clang

build-windows-msvc15:
  stage: build
  script:
    - gitlab\build.bat "Visual Studio 15 2017 Win64" "v141"
  tags:
    - msvc15
    - win10
  artifacts:
    paths:
      - build/install
    expire_in: 3 day

## Build From Install Jobs ##

build-from-install-centos7:
  <<: *build_from_install_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs:
    - build-centos7

## Functional Test Jobs ##

test-functional-centos7:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs:
    - build-centos7

# ensures icc-built binaries can run without Intel runtimes
test-functional-centos7-icc:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs:
    - build-centos7-icc

test-functional-centos8:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos8
  needs:
    - build-centos8

test-functional-ubuntu16.04:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu16.04
  script:
    - export LD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests
  needs:
    - build-ubuntu16.04

test-functional-ubuntu18.04:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu18.04
  script:
    - export LD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests
  needs:
    - build-ubuntu18.04

test-functional-ubuntu20.04:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu20.04
  script:
    - export LD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests
  needs:
    - build-ubuntu20.04

test-functional-arch:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  needs:
    - build-arch

test-functional-arch-clang:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  needs:
    - build-arch-clang

test-functional-arch-address-sanitizer:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  needs:
    - build-arch-address-sanitizer

test-functional-arch-debug:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  needs:
    - build-arch-debug

test-functional-arch-devel-rkdeps:
  <<: *test_functional_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  needs:
    - build-arch-devel-rkdeps

test-functional-macOS:
  <<: *base_functional_test_job
  needs:
    - build-macOS
  tags:
    - osx
    - clang
  script:
    - export DYLD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests

test-functional-windows-msvc15:
  <<: *base_functional_test_job
  script:
    - gitlab\run_tests.bat
  needs:
    - build-windows-msvc15
  tags:
    - msvc15
    - win10

## Benchmark Jobs ##

# All pipelines have these manual benchmark jobs - one for all benchmarks,
# plus one job for each suite.

.job_template: &manual_benchmark_x8280-1
  <<: *base_benchmark_job
  when: manual
  needs:
    - build-centos7-icc
  tags:
    - vis-perf-x8280-1

benchmark-x8280-1:
  <<: *manual_benchmark_x8280-1

structured-benchmark-x8280-1:
  <<: *manual_benchmark_x8280-1
  variables:
    BENCHMARK_SUITE: ^StructuredVolume$

structured-multi-benchmark-x8280-1:
  <<: *manual_benchmark_x8280-1
  variables:
    BENCHMARK_SUITE: ^StructuredVolumeMulti$

vdb-benchmark-x8280-1:
  <<: *manual_benchmark_x8280-1
  variables:
    BENCHMARK_SUITE: ^VDBVolume$

example-benchmark-x8280-1:
  <<: *manual_benchmark_x8280-1
  variables:
    BENCHMARK_SUITE: ^ExampleRenderers$

# Another benchmark job meant for scheduled (nightly, weekly, ...) builds.
# The builds must define RUN_SCHEDULE_BENCHMARKS to run the job, and may use
# BENCHMARK_MIN_TIME_SECONDS to configure the benchmark run time.
benchmark-x8280-1-schedule:
  <<: *base_benchmark_job
  only:
    variables:
      - $RUN_SCHEDULE_BENCHMARKS
  needs:
    - build-centos7-icc
  tags:
    - vis-perf-x8280-1

## KW Jobs ##

build-kw-scan:
  stage: scan1
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
    - gitlab/build-kw-scan.sh
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update
  tags: [docker]
  artifacts:
    paths:
      - ./klocwork/*
  needs: []

check-kw-issues:
  stage: scan2
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs: [build-kw-scan]
  script:
    - gitlab/kw-check-issues.sh
  tags:
    - docker
  allow_failure: true

gen-kw-report:
  stage: scan2
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs: [build-kw-scan]
  tags: [docker]
  script:
    - gitlab/kw-gen-report.sh
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID klocwork "klocwork/report.log"
  artifacts:
    paths:
      - ./klocwork/*

## Protex Job ##

source-protex-scan:
  stage: scan1
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
    - gitlab/source-scan-protex.sh
  tags:
    - docker
  needs: []
  allow_failure: true

## Release Jobs ##

release-linux-icc:
  <<: *base_release_job
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7-mod
  script:
    - module load cmake
    - module load intel/2019.4
    - export CC=icc
    - export CXX=icpc
    - export CXXFLAGS="-static-intel -fPIC"
    - gitlab/release/linux.sh
  needs: []
  tags:
    - docker
    - modules
  artifacts:
    paths:
      - ./*.gz

release-macOS:
  <<: *base_release_job
  script:
    - gitlab/release/macos.sh
  needs: []
  tags:
    - osx
    - clang
  artifacts:
    paths:
      - ./*.zip

release-windows:
  <<: *base_release_job
  script:
    - gitlab/release/windows.ps1 "Visual Studio 15 2017 Win64" "v141"
  needs: []
  tags:
    - msvc15
    - win10
  artifacts:
    paths:
      - ./*.zip

## Release Test Jobs ##

release-linux-test:
  <<: *base_release_test_job
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
    - gitlab/release/linux-test.sh
  tags:
    - docker
  needs:
    - release-linux-icc

release-macOS-test:
  <<: *base_release_test_job
  script:
    - gitlab/release/macos-test.sh
  tags:
    - osx
    - clang
  needs:
    - release-macOS

release-windows-test:
  <<: *base_release_test_job
  script:
    - gitlab/release/windows-test.ps1 "Visual Studio 15 2017 Win64" "v141"
  tags:
    - msvc15
    - win10
  needs:
    - release-windows

scan-bdba-bin:
  stage: scan-binaries
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  tags: [docker]
  needs: [release-linux-icc, release-macOS, release-windows]
  script:
    - gitlab/bdba.sh "openvkl-*"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "openvkl-*.pdf"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "openvkl-*.csv"
  artifacts:
    paths:
      - openvkl-*.pdf
      - openvkl-*.csv

av:
  stage: scan-binaries
  tags: [docker]
  image: $DOCKER_REGISTRY/clamav:ubuntu20.04
  needs: [release-linux-icc, release-macOS, release-windows]
  script:
    - freshclam | tee -a /tmp/av_scan.log
    - clamscan -va --max-filesize=256M --max-scansize=1024M --alert-broken --alert-exceeds-max openvkl-* | tee -a /tmp/av_scan.log
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID av /tmp/av_scan.log
