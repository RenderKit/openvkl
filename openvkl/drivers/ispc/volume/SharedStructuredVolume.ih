// Copyright 2019-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "../common/Data.ih"
#include "Volume.ih"
#include "rkcommon/math/box.ih"
#include "rkcommon/math/vec.ih"
#include "openvkl/VKLDataType.h"
#include "openvkl/VKLFilter.h"

struct GridAccelerator;
struct SharedStructuredVolume;

enum SharedStructuredVolumeGridType
{
  structured_regular,
  structured_spherical
};

typedef varying float (*uniform ComputeSampleInnerVaryingFunc)(
    const SharedStructuredVolume *uniform self,
    const varying vec3f &clampedLocalCoordinates,
    const uniform VKLFilter filter,
    const uniform uint32 attributeIndex,
    const varying float &times);

typedef uniform float (*uniform ComputeSampleInnerUniformFunc)(
    const SharedStructuredVolume *uniform self,
    const uniform vec3f &clampedLocalCoordinates,
    const uniform VKLFilter filter,
    const uniform uint32 attributeIndex,
    const uniform float& times);

typedef varying vec3f (*uniform ComputeGradientVaryingFunc)(
    const SharedStructuredVolume *uniform _self,
    const varying vec3f &objectCoordinates,
    const uniform VKLFilter filter,
    const uniform uint32 attributeIndex,
    const varying float &time);

typedef varying range1f (*uniform ComputeVoxelRangeFunc)(
    const SharedStructuredVolume *uniform self,
    const varying vec3i &localCoordinates,
    const uniform uint32 attributeIndex);

struct SharedStructuredVolume
{
  Volume super;

  uniform uint32 numAttributes;
  Data1D *uniform attributesData;

  uniform uint32 temporallyStructuredNumTimesteps;
  uniform Data1D temporallyUnstructuredIndices;
  uniform Data1D temporallyUnstructuredTimes;

  uniform vec3i dimensions;

  uniform SharedStructuredVolumeGridType gridType;
  uniform vec3f gridOrigin;
  uniform vec3f gridSpacing;

  uniform box3f boundingBox;

  uniform vec3f localCoordinatesUpperBound;

  GridAccelerator *uniform accelerator;

  // offsets, in voxels, for one step in x,y,z direction; ONLY valid if
  // bytesPerSlice < 2G.
  uniform uint32 voxelOfs_dx, voxelOfs_dy, voxelOfs_dz;

  // This is only used by the legacy sample wrappers - remove once those 
  // have disappeared.
  VKLFilter filter;

  // varying functions
  void (*uniform transformLocalToObject_varying)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &localCoordinates,
      varying vec3f &objectCoordinates);

  void (*uniform transformObjectToLocal_varying)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &objectCoordinates,
      varying vec3f &localCoordinates);

  ComputeVoxelRangeFunc *uniform computeVoxelRange;

  ComputeSampleInnerVaryingFunc *uniform computeSamplesInner_varying;
  ComputeGradientVaryingFunc computeGradient_varying;

  // uniform functions
  void (*uniform transformLocalToObject_uniform)(
      const SharedStructuredVolume *uniform self,
      const uniform vec3f &localCoordinates,
      uniform vec3f &objectCoordinates);

  void (*uniform transformObjectToLocal_uniform)(
      const SharedStructuredVolume *uniform self,
      const uniform vec3f &objectCoordinates,
      uniform vec3f &localCoordinates);

  ComputeSampleInnerUniformFunc *uniform computeSamplesInner_uniform;
};
