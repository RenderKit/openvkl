// Copyright 2019-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "../Volume.ih"
#include "sampler/Sampler.ih"
#include "AMR.ih"

struct AMRVolume
{
  Volume super;

  uniform vec3f gridSpacing;
  uniform vec3f gridOrigin;
  uniform box3f boundingBox;
  uniform float samplingStep;

  AMR amr;

  varying float (*uniform computeSample_varying)(
      const AMRVolume *uniform _self, 
      const varying vec3f &objectCoordinates);

  //! The value at the given sample location in world coordinates.
  varying float (*uniform computeSampleLevel)(
      const AMRVolume *uniform self, 
      const varying vec3f &worldCoordinates);

  //! Transform from local coordinates to world coordinates using the volume's
  //! grid definition.
  void (*uniform transformLocalToWorld)(const AMRVolume *uniform volume,
                                        const varying vec3f &localCoordinates,
                                        varying vec3f &worldCoordinates);

  //! Transform from world coordinates to local coordinates using the volume's
  //! grid definition.
  void (*uniform transformWorldToLocal)(const AMRVolume *uniform volume,
                                        const varying vec3f &worldCoordinates,
                                        varying vec3f &localCoordinates);
};
