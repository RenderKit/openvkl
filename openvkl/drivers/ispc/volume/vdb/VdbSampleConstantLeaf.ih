// Copyright 2019-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

// ---------------------------------------------------------------------------
// CONSTANT leaf sampling.
// ---------------------------------------------------------------------------

#define template_VdbSampler_sampleConstantLeaf(voxelType)                    \
                                                                             \
  /*                                                                         \
   * Sample a constant leaf at the given offset, assuming compact data.      \
   */                                                                        \
  inline varying float VdbSampler_sampleConstantLeafCompact_##voxelType(     \
      const uniform Data1D *varying leafPtr,                                 \
      const varying vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const varying uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_varying_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((varying uint64)1) << 32);                            \
    const varying uint32 v32 = ((varying uint32)voxelIdx);                   \
    return get_##voxelType##_compact(&leafPtr[attributeIndex], v32);         \
  }                                                                          \
                                                                             \
  /*                                                                         \
   * Sample a constant leaf at the given offset, assuming strided data.      \
   */                                                                        \
  inline varying float VdbSampler_sampleConstantLeafStrided_##voxelType(     \
      const uniform Data1D *varying leafPtr,                                 \
      const varying vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const varying uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_varying_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((varying uint64)1) << 32);                            \
    const varying uint32 v32 = ((varying uint32)voxelIdx);                   \
    return get_##voxelType##_strided(&leafPtr[attributeIndex], v32);         \
  }                                                                          \
                                                                             \
  /*                                                                         \
   * Special case: all lanes are sampling the same leaf.                     \
   * This gives us the opportunity to use uniform array indices, at least if \
   * all sample points are in the same voxel.                                \
   */                                                                        \
                                                                             \
  /* assumes compact data */                                                 \
  inline varying float VdbSampler_sampleConstantLeafCompact_##voxelType(     \
      const uniform Data1D *uniform leafPtr,                                 \
      const varying vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const varying uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_varying_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((varying uint64)1) << 32);                            \
    const varying uint32 v32 = ((varying uint32)voxelIdx);                   \
    uniform uint32 uv32;                                                     \
    if (reduce_equal(v32, &uv32))                                            \
      return get_##voxelType##_compact(leafPtr[attributeIndex], uv32);       \
    else                                                                     \
      return get_##voxelType##_compact(leafPtr[attributeIndex], v32);        \
  }                                                                          \
                                                                             \
  /* assumes strided data */                                                 \
  inline varying float VdbSampler_sampleConstantLeafStrided_##voxelType(     \
      const uniform Data1D *uniform leafPtr,                                 \
      const varying vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const varying uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_varying_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((varying uint64)1) << 32);                            \
    const varying uint32 v32 = ((varying uint32)voxelIdx);                   \
    uniform uint32 uv32;                                                     \
    if (reduce_equal(v32, &uv32))                                            \
      return get_##voxelType##_strided(leafPtr[attributeIndex], uv32);       \
    else                                                                     \
      return get_##voxelType##_strided(leafPtr[attributeIndex], v32);        \
  }                                                                          \
                                                                             \
  /*                                                                         \
   * Special case: uniform sampling of a single offset.                      \
   */                                                                        \
                                                                             \
  /* assumes compact data */                                                 \
  inline uniform float VdbSampler_sampleConstantLeafCompact_##voxelType(     \
      const uniform Data1D *uniform leafPtr,                                 \
      const uniform vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const uniform uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_uniform_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((uniform uint64)1) << 32);                            \
    const uniform uint32 v32 = ((uniform uint32)voxelIdx);                   \
    return get_##voxelType##_compact(leafPtr[attributeIndex], v32);          \
  }                                                                          \
                                                                             \
  /* assumes strided data */                                                 \
  inline uniform float VdbSampler_sampleConstantLeafStrided_##voxelType(     \
      const uniform Data1D *uniform leafPtr,                                 \
      const uniform vec3ui &offset,                                          \
      uniform uint32 attributeIndex)                                         \
  {                                                                          \
    const uniform uint64 voxelIdx =                                          \
        __vkl_vdb_domain_offset_to_linear_uniform_leaf(                      \
            offset.x, offset.y, offset.z);                                   \
                                                                             \
    assert(voxelIdx < ((uniform uint64)1) << 32);                            \
    const uniform uint32 v32 = ((uniform uint32)voxelIdx);                   \
    return get_##voxelType##_strided(leafPtr[attributeIndex], v32);          \
  }

template_VdbSampler_sampleConstantLeaf(half);
template_VdbSampler_sampleConstantLeaf(float);
#undef template_VdbSampler_sampleConstantLeaf
