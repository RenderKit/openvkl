// Copyright 2019-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

// ---------------------------------------------------------------------------
// Dispatch to inner nodes.
//
// Note: We generate files VdbSamplerDispatchInner_<level>.ih from this 
//       template using CMake.
// ---------------------------------------------------------------------------

#include "VdbSampleInner_uniform_@VKL_VDB_LEVEL@.ih"
#include "VdbSampleInner_varying_@VKL_VDB_LEVEL@.ih"

/*
 * Dispatch to the sampler implementation based on whether all lanes are looking 
 * at the same voxel.  
 * The first version is still uniform, but will detect if it must split up 
 * into varying traversal.
 */
inline varying float VdbSampler_dispatchInner_uniform_@VKL_VDB_LEVEL@(
  const VdbSampler *uniform      sampler,
  const varying vec3ui          &domainOffset,
  uniform uint64                 nodeIndex)
{
  assert(nodeIndex < sampler->grid->levels[@VKL_VDB_LEVEL@].numNodes);
  const varying uint64 voxelIdx = 
    __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(domainOffset.x,  
                                                              domainOffset.y, 
                                                              domainOffset.z);
  const uniform uint64 nodeVoxelOffset = nodeIndex * VKL_VDB_NUM_VOXELS_@VKL_VDB_LEVEL@;
  assert(voxelIdx < VKL_VDB_NUM_VOXELS_@VKL_VDB_LEVEL@);

  /* If all lanes happen to look at the same voxel use uniform code! */
  uniform uint64 uvidx;
  if (reduce_equal(voxelIdx, &uvidx))
  {
    return VdbSampler_sampleInner_uniform_@VKL_VDB_LEVEL@(
      sampler,
      domainOffset, 
      nodeVoxelOffset + uvidx);
  }
  else
  {
    return VdbSampler_sampleInner_varying_@VKL_VDB_LEVEL@(
      sampler,
      domainOffset, 
      nodeVoxelOffset + voxelIdx);
  }
}

/*
 * This second version is varying, meaning that lanes have diverged.
 * In this case, there is no chance to get back to coherent traversal, so we might
 * as well skip the test above.
 */
inline varying float VdbSampler_dispatchInner_varying_@VKL_VDB_LEVEL@(
  const VdbSampler *uniform      sampler,
  const varying vec3ui          &domainOffset,
  varying uint64                 nodeIndex)
{
  assert(nodeIndex < sampler->grid->levels[@VKL_VDB_LEVEL@].numNodes);
  const varying uint64 voxelIdx = 
    __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(domainOffset.x,  
                                                              domainOffset.y, 
                                                              domainOffset.z);
  const varying uint64 nodeVoxelOffset = nodeIndex * VKL_VDB_NUM_VOXELS_@VKL_VDB_LEVEL@;
  assert(voxelIdx < VKL_VDB_NUM_VOXELS_@VKL_VDB_LEVEL@);

  return VdbSampler_sampleInner_varying_@VKL_VDB_LEVEL@(
    sampler, 
    domainOffset, 
    nodeVoxelOffset + voxelIdx);
}

