// Copyright 2019 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common.isph"
#include "sampler.isph"
#include "max_iterator_size.h"

struct IntervalIteratorContext;
typedef IntervalIteratorContext *uniform VKLIntervalIteratorContext;

struct HitIteratorContext;
typedef HitIteratorContext *uniform VKLHitIteratorContext;

///////////////////////////////////////////////////////////////////////////////
// Interval iterators /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

struct IntervalIterator;
typedef IntervalIterator *uniform VKLIntervalIterator;

VKL_API uniform size_t
vklGetIntervalIteratorSize4(VKLIntervalIteratorContext context);

VKL_API uniform size_t
vklGetIntervalIteratorSize8(VKLIntervalIteratorContext context);

VKL_API uniform size_t
vklGetIntervalIteratorSize16(VKLIntervalIteratorContext context);

VKL_FORCEINLINE uniform size_t
vklGetIntervalIteratorSizeV(VKLIntervalIteratorContext context)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16)
    return vklGetIntervalIteratorSize4(context);
  else if (sizeof(varying float) == 32)
    return vklGetIntervalIteratorSize8(context);
  else if (sizeof(varying float) == 64)
    return vklGetIntervalIteratorSize16(context);
}

struct VKLInterval
{
  vkl_range1f tRange;
  vkl_range1f valueRange;
  float nominalDeltaT;
};

VKL_API VKLIntervalIterator
vklInitIntervalIterator4(const int *uniform valid,
                         VKLIntervalIteratorContext context,
                         const varying vkl_vec3f *uniform origin,
                         const varying vkl_vec3f *uniform direction,
                         const varying vkl_range1f *uniform tRange,
                         const varying float *uniform time,
                         void *uniform buffer);

VKL_API VKLIntervalIterator
vklInitIntervalIterator8(const int *uniform valid,
                         VKLIntervalIteratorContext context,
                         const varying vkl_vec3f *uniform origin,
                         const varying vkl_vec3f *uniform direction,
                         const varying vkl_range1f *uniform tRange,
                         const varying float *uniform time,
                         void *uniform buffer);

VKL_API VKLIntervalIterator
vklInitIntervalIterator16(const int *uniform valid,
                          VKLIntervalIteratorContext context,
                          const varying vkl_vec3f *uniform origin,
                          const varying vkl_vec3f *uniform direction,
                          const varying vkl_range1f *uniform tRange,
                          const varying float *uniform time,
                          void *uniform buffer);

VKL_FORCEINLINE VKLIntervalIterator
vklInitIntervalIteratorV(VKLIntervalIteratorContext context,
                         const varying vkl_vec3f *uniform origin,
                         const varying vkl_vec3f *uniform direction,
                         const varying vkl_range1f *uniform tRange,
                         const varying float *uniform time,
                         void *uniform buffer)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16) {
    return vklInitIntervalIterator4((uniform int *uniform) & imask,
                                    context,
                                    origin,
                                    direction,
                                    tRange,
                                    time,
                                    buffer);
  } else if (sizeof(varying float) == 32) {
    return vklInitIntervalIterator8((uniform int *uniform) & imask,
                                    context,
                                    origin,
                                    direction,
                                    tRange,
                                    time,
                                    buffer);
  } else if (sizeof(varying float) == 64) {
    return vklInitIntervalIterator16((uniform int *uniform) & imask,
                                     context,
                                     origin,
                                     direction,
                                     tRange,
                                     time,
                                     buffer);
  }
}

VKL_API void vklIterateInterval4(const int *uniform valid,
                                 VKLIntervalIterator iterator,
                                 varying VKLInterval *uniform interval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval8(const int *uniform valid,
                                 VKLIntervalIterator iterator,
                                 varying VKLInterval *uniform interval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval16(const int *uniform valid,
                                  VKLIntervalIterator iterator,
                                  varying VKLInterval *uniform interval,
                                  varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateIntervalV(
    VKLIntervalIterator iterator, varying VKLInterval *uniform interval)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateInterval4(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateInterval8(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateInterval16(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}

///////////////////////////////////////////////////////////////////////////////
// Hit iterators //////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

struct HitIterator;
typedef HitIterator *uniform VKLHitIterator;

VKL_API uniform size_t vklGetHitIteratorSize4(VKLHitIteratorContext context);

VKL_API uniform size_t vklGetHitIteratorSize8(VKLHitIteratorContext context);

VKL_API uniform size_t vklGetHitIteratorSize16(VKLHitIteratorContext context);

VKL_FORCEINLINE uniform size_t
vklGetHitIteratorSizeV(VKLHitIteratorContext context)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16)
    return vklGetHitIteratorSize4(context);
  else if (sizeof(varying float) == 32)
    return vklGetHitIteratorSize8(context);
  else if (sizeof(varying float) == 64)
    return vklGetHitIteratorSize16(context);
}

struct VKLHit
{
  float t;
  float sample;
  float epsilon;
};

VKL_API VKLHitIterator
vklInitHitIterator4(const int *uniform valid,
                    VKLHitIteratorContext context,
                    const varying vkl_vec3f *uniform origin,
                    const varying vkl_vec3f *uniform direction,
                    const varying vkl_range1f *uniform tRange,
                    const varying float *uniform time,
                    void *uniform buffer);

VKL_API VKLHitIterator
vklInitHitIterator8(const int *uniform valid,
                    VKLHitIteratorContext context,
                    const varying vkl_vec3f *uniform origin,
                    const varying vkl_vec3f *uniform direction,
                    const varying vkl_range1f *uniform tRange,
                    const varying float *uniform time,
                    void *uniform buffer);

VKL_API VKLHitIterator
vklInitHitIterator16(const int *uniform valid,
                     VKLHitIteratorContext context,
                     const varying vkl_vec3f *uniform origin,
                     const varying vkl_vec3f *uniform direction,
                     const varying vkl_range1f *uniform tRange,
                     const varying float *uniform time,
                     void *uniform buffer);

VKL_FORCEINLINE VKLHitIterator
vklInitHitIteratorV(VKLHitIteratorContext context,
                    const varying vkl_vec3f *uniform origin,
                    const varying vkl_vec3f *uniform direction,
                    const varying vkl_range1f *uniform tRange,
                    const varying float *uniform time,
                    void *uniform buffer)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16) {
    return vklInitHitIterator4((uniform int *uniform) & imask,
                               context,
                               origin,
                               direction,
                               tRange,
                               time,
                               buffer);
  } else if (sizeof(varying float) == 32) {
    return vklInitHitIterator8((uniform int *uniform) & imask,
                               context,
                               origin,
                               direction,
                               tRange,
                               time,
                               buffer);
  } else if (sizeof(varying float) == 64) {
    return vklInitHitIterator16((uniform int *uniform) & imask,
                                context,
                                origin,
                                direction,
                                tRange,
                                time,
                                buffer);
  }
}

VKL_API void vklIterateHit4(const int *uniform valid,
                            VKLHitIterator iterator,
                            varying VKLHit *uniform hit,
                            varying int *uniform result);

VKL_API void vklIterateHit8(const int *uniform valid,
                            VKLHitIterator iterator,
                            varying VKLHit *uniform hit,
                            varying int *uniform result);

VKL_API void vklIterateHit16(const int *uniform valid,
                             VKLHitIterator iterator,
                             varying VKLHit *uniform hit,
                             varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateHitV(VKLHitIterator iterator,
                                            varying VKLHit *uniform hit)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateHit4((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateHit8((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateHit16((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}
